// PTOR:start
// File was generated by Selenium Protractor
var TEST_CASE = {
  "baseUrl": "/",
  "title": "Protractor Demo App",
  "items": [
    {
      "type": "comment",
      "value": "should open the site"
    },
    {
      "type": "command",
      "command": "open",
      "locator": "${config.url}"
    },
    {
      "type": "comment",
      "value": "should add one and two"
    },
    {
      "command": "sendKeys",
      "locator": "css=.container div .form-inline input[ng-model=\"first\"]",
      "value": "${data.value1 || '1'}",
      "type": "command"
    },
    {
      "command": "sendKeys",
      "locator": "css=.container div .form-inline input[ng-model=\"second\"]",
      "value": "${data.value2 || '2'}",
      "type": "command"
    },
    {
      "command": "click",
      "locator": "id=gobutton",
      "type": "command"
    },
    {
      "type": "command",
      "command": "waitForElementPresent",
      "locator": "css=.container .table tbody tr td:nth-child(3)"
    },
    {
      "command": "assertText",
      "locator": "css=.container div .form-inline h2",
      "value": "${data.result || '3'}",
      "type": "command"
    },
    {
      "command": "waitForText",
      "locator": "css=.container .table tbody tr td:nth-child(3)",
      "value": "${data.result || '3'}",
      "type": "command"
    },
    {
      "type": "comment",
      "value": "should verify that state is cleared"
    },
    {
      "command": "assertValue",
      "locator": "css=[ng-model='first']",
      "value": "",
      "type": "command"
    },
    {
      "command": "assertValue",
      "locator": "css=[ng-model='second']",
      "value": "",
      "type": "command"
    }
  ]
};
// PTOR:end

// Do not modify anything below as changes will be lost!

'use strict'
module.exports = (function(config, data) {

    describe('Protractor Demo App', function() {

        it('should open the site', function() {

            browser.get(config.url);
        });

        it('should add one and two', function() {

            element(by.css(`.container div .form-inline input[ng-model="first"]`)).sendKeys(data.value1 || '1');
            element(by.css(`.container div .form-inline input[ng-model="second"]`)).sendKeys(data.value2 || '2');
            browser.executeScript('arguments[0].scrollIntoView(false);', element(by.id(`gobutton`)).getWebElement());
            element(by.id(`gobutton`)).click().then(function(){},function(err){fail(err+"\ncommand: "+`click|id=gobutton|`);});

            browser.wait(protractor.ExpectedConditions.presenceOf(element(by.css(`.container .table tbody tr td:nth-child(3)`))), 2000,`waitForElementPresent|css=.container .table tbody tr td:nth-child(3)|`);
            element(by.css(`.container div .form-inline h2`)).getText().then(function (_value) {
                expect(_value).toEqual(data.result || '3',`assertText|css=.container div .form-inline h2|${data.result || '3'}`);
                browser.wait(protractor.ExpectedConditions.textToBePresentInElement(element(by.css(`.container .table tbody tr td:nth-child(3)`)),data.result || '3'), 5000, `waitForText|css=.container .table tbody tr td:nth-child(3)|${data.result || '3'}`);
            });

        });

        it('should verify that state is cleared', function() {

            element(by.css(`[ng-model='first']`)).getAttribute("value").then(function (_value) {
                expect(_value).toEqual('',`assertValue|css=[ng-model='first']|`);
                element(by.css(`[ng-model='second']`)).getAttribute("value").then(function (_value) {
                    expect(_value).toEqual('',`assertValue|css=[ng-model='second']|`);
                });

            });

        });

    });

});

